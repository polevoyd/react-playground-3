{"version":3,"sources":["components/Map.js","reducers/rootReducer.js","config.js","components/LocationInput.js","components/MapContainer.js","components/InfoButton.js","components/InfoTab.js","actions/actions.js","components/App.js","index.js"],"names":["map","initialState","location","locationLngLat","tweets","rootReducer","state","arguments","length","undefined","action","type","city","tweetsArray","config","LocationInput","react_default","a","createElement","onSubmit","this","props","handleLocationSubmit","className","name","placeholder","value","locationToShow","onChange","handleLocationChange","React","Component","arrayOfMarkers","Map","nextProps","_this","coordinates","setCenter","_i","remove","setTimeout","createPins","arrayOfTweets","element","index","markerElement","document","popup","mapboxgl","Popup","offset","closeButton","picture","pic","popupHTMLContent","concat","text","user","setHTML","addEventListener","setLngLat","point","addTo","Marker","setPopup","Math","random","accessToken","container","getElementById","style","center","zoom","hash","minZoom","maxZoom","interactive","renderMapToScreen","MapContainer","id","components_Map","InfoButton","onClick","handleInfoButtonClick","InfoTab","href","LOCATION_SET_CITY_COORDINATES","LOCATION_SET_CITY","SET_TWEETS","setLocationAndCoordinates","require","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getCoordinatesFromURL","window","split","splice","parseFloat","bind","assertThisInitialized","searchForTweets","dispatch","_this2","linkToRequest","fetch","then","results","json","features","place_name","event","_this3","preventDefault","requestLocationGeocode","target","radius","y0","x0","rd","u","v","w","sqrt","t","PI","x","cos","sin","_this4","linkToFetch","response","generateCoordinateWithin","media_url","catch","error","console","querySelector","height","paddingTop","borderRadius","border","backgroundColor","components_LocationInput","components_MapContainer","components_InfoButton","components_InfoTab","connect","store","createStore","ReactDOM","render","es","components_App"],"mappings":"wIAWIA,0DCVEC,EAAe,CACjBC,SAAU,yCACVC,eAAgB,EAAE,SAAU,SAC5BC,OAAQ,IAgCGC,EA7BK,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAElD,OAAQC,EAAOC,MACX,IAAK,gCACD,MAAO,CACHT,SAAUQ,EAAOR,SACjBC,eAAgBO,EAAOP,eACvBC,OAAQE,EAAMF,QAGtB,IAAK,oBACD,MAAO,CACHF,SAAUQ,EAAOE,KACjBT,eAAgBG,EAAMH,eACtBC,OAAQE,EAAMF,QAGtB,IAAK,aACD,MAAO,CACPF,SAAUI,EAAMJ,SAChBC,eAAgBG,EAAMH,eACtBC,OAAQM,EAAOG,aAGnB,QACI,OAAOP,8CChCNQ,EAEY,oGCeVC,mLAXP,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,qBAAsBC,UAAU,kBACvDP,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOP,KAAK,OAAOa,KAAK,WAAWC,YAAY,eAAeC,MAAON,KAAKC,MAAMM,eAAgBC,SAAUR,KAAKC,MAAMQ,wBAEzHb,EAAAC,EAAAC,cAAA,UAAQP,KAAK,UAAb,uBARYmB,IAAMC,2BHS9BC,EAAiB,GA8HNC,oMAtHaC,GAAU,IAAAC,EAAAf,KAGlC,GAAIc,EAAUE,cAAgBhB,KAAKC,MAAMe,YAAa,CAGpDpC,EAAIqC,UAAUH,EAAUE,aAGxB,QAAAE,EAAA,EAAAA,EAAmBN,EAAnBxB,OAAA8B,IAAmC,CAAhBN,EAAJM,GACLC,SAIVC,WAAW,WAGTL,EAAKM,WAAWN,EAAKd,MAAMjB,SAC1B,yCAQIsC,GAETV,EAAiBU,EAEd1C,IAAI,SAAC2C,EAASC,GAGb,IAAIC,EAAgBC,SAAS5B,cAAc,OAC3C2B,EAActB,UAAY,SAK1B,IAAMwB,EAAQ,IAAIC,IAASC,MAAM,CAC/BC,OAAQ,GACRC,aAAa,EACb5B,UAAW,UAIP6B,EAAUT,EAAQU,IAAMV,EAAQU,IAAtB,GACVC,EAAgB,+BAAAC,OAAkCH,EAAlC,kCAAAG,OAA0EZ,EAAQa,KAAlF,kCAAAD,OAAuHZ,EAAQc,KAA/H,SAUtB,OATAV,EAAMW,QAAQJ,GAGdT,EAAcc,iBAAiB,YAAa,kBAAMZ,EAAMa,UAAUjB,EAAQkB,OAAOH,QAAQJ,GAAkBQ,MAAM9D,KAGjH6C,EAAcc,iBAAiB,WAAY,kBAAMZ,EAAMR,WAGhD,IAAIS,IAASe,OAAOlB,GACtBe,UAAUjB,EAAQkB,OAClBG,SAASjB,GACTe,MAAM9D,mDAUf,aAAAuD,OAA8B,IAAhBU,KAAKC,SAAnB,MAAAX,OAAsD,IAAhBU,KAAKC,SAA3C,MAAAX,OAA8E,IAAhBU,KAAKC,SAAnE,iDAYAlB,IAASmB,YAAcrD,EACvBd,EAAM,IAAIgD,IAASf,IAAI,CACnBmC,UAAWtB,SAASuB,eAAe,oBACnCC,MAAO,iCACPC,OAAQ,CAAC,YAAa,WACtBC,KAAM,GACNC,MAAM,EACNC,QAAS,GACTC,QAAS,GACTC,aAAa,gDAiBjBxD,KAAKyD,qDAIL,OACE7D,EAAAC,EAAAC,cAAA,mBAvHYY,IAAMC,WIAT+C,mLARP,OACI9D,EAAAC,EAAAC,cAAA,OAAK6D,GAAG,oBACJ/D,EAAAC,EAAAC,cAAC8D,EAAD,CAAK5C,YAAahB,KAAKC,MAAMe,YAAahC,OAAQgB,KAAKC,MAAMjB,iBAJlD0B,IAAMC,WCSlBkD,mLARP,OACIjE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YAAY2D,QAAS9D,KAAKC,MAAM8D,uBAC/CnE,EAAAC,EAAAC,cAAA,uBAJaY,IAAMC,WCUhBqD,EAVC,WACR,OACIpE,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACfP,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,gFACAF,EAAAC,EAAAC,cAAA,KAAGK,UAAU,WAAUP,EAAAC,EAAAC,cAAA,KAAGmE,KAAK,yBAAR,qBCR7BC,EAAgC,gCAChCC,EAAoB,oBACpBC,EAAa,aAEZ,SAASC,EAA0BvF,EAAUC,GAChD,MAAO,CAAEQ,KAAM2E,EAA+BpF,WAAUC,kBCK5DuF,EAAQ,IAAU5E,aAMZ6E,cAEJ,SAAAA,EAAYtE,GAAO,IAAAc,EAAA,OAAAyD,OAAAC,EAAA,EAAAD,CAAAxE,KAAAuE,IACjBxD,EAAAyD,OAAAE,EAAA,EAAAF,CAAAxE,KAAAwE,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5E,KAAMC,KAqBR4E,sBAAwB,WACtB,OAAOC,OAAOhG,SAASuE,KAAK0B,MAAM,KAAKC,OAAO,EAAG,GAAGpG,IAAK,SAAA2C,GAAO,OAAI0D,WAAW1D,MApB/ER,EAAKb,qBAAuBa,EAAKb,qBAAqBgF,KAA1BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAzD,KAC5BA,EAAKN,qBAAuBM,EAAKN,qBAAqByE,KAA1BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAzD,KAC5BA,EAAKqE,gBAAkBrE,EAAKqE,gBAAgBF,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAzD,KALNA,mFAajBf,KAAKC,MAAMoF,SAAShB,EAA0B,yCAA0C,EAAE,SAAU,WAEpGrE,KAAKoF,mEAekB,IAAAE,EAAAtF,KAGjBuF,EAAa,qDAAApD,OAAwDnC,KAAKC,MAAMf,MAAMJ,SAAzE,uBAAAqD,OAAuGzC,GAG1H8F,MAAMD,GACHE,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAACC,GAILJ,EAAKrF,MAAMoF,SAAShB,EAA0BqB,EAAQE,SAAS,GAAGC,WAAYH,EAAQE,SAAS,GAAGzC,wDAQnF2C,GAAO,IAAAC,EAAA/F,KAE1B8F,EAAME,iBACNhG,KAAKiG,uBAAuBjG,KAAKC,MAAMf,MAAMJ,UAG7CsC,WAAW,kBAAM2E,EAAKX,mBAAmB,kDAOtBU,GDzEhB,IAAyBtG,EC0E5BQ,KAAKC,MAAMoF,UD1EiB7F,EC0EQsG,EAAMI,OAAO5F,MDzE1C,CAAEf,KAAM4E,EAAmB3E,2DCgFX2D,EAAQgD,GAE/B,IAAIC,EAAKjD,EAAO,GACZkD,EAAKlD,EAAO,GACZmD,EAAe,QAATH,EAAmB,IAAQ,OACjCI,EAAI1D,KAAKC,SACT0D,EAAI3D,KAAKC,SACT2D,EAAIH,EAAKzD,KAAK6D,KAAKH,GACnBI,EAAI,EAAI9D,KAAK+D,GAAKJ,EAClBK,EAAIJ,EAAI5D,KAAKiE,IAAIH,GAGrB,MAAO,CAFCF,EAAI5D,KAAKkE,IAAIJ,GAETP,EAAIS,EAAIR,6CAOJ,IAAAW,EAAAhH,KAGViH,EAAW,6CAAA9E,OAAgDnC,KAAKC,MAAMf,MAAMH,eAAe,GAAhF,SAAAoD,OAA0FnC,KAAKC,MAAMf,MAAMH,eAAe,IAE3IyG,MAAMyB,GACLxB,KAAK,SAAAyB,GAAQ,OAAIA,EAASvB,SAC1BF,KAAK,SAAAyB,GAKJ,IAAMlI,EAASkI,EACd/E,OAAO+E,GACPtI,IAAI,SAAA2C,GACH,MAAO,CACJkB,MAAOuE,EAAKG,yBAAyBH,EAAK/G,MAAMf,MAAMH,eAAgB,GACtEqD,KAAMb,EAAQa,KACdH,IAAKV,EAAQS,QAAUT,EAAQS,QAAQ,GAAGoF,eAAY/H,EACtDgD,KAAMd,EAAQc,QAKnB2E,EAAK/G,MAAMoF,SDvHN,CAAE9F,KAAM6E,EAAY3E,YCuHKT,MAE/BqI,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,qDAS8B,SAAxD5F,SAAS8F,cAAc,gBAAgBtE,MAAMuE,QAE/C/F,SAAS8F,cAAc,gBAAgBtE,MAAMuE,OAAS,OACtD/F,SAAS8F,cAAc,gBAAgBtE,MAAMwE,WAAa,OAC1DhG,SAAS8F,cAAc,gBAAgBtE,MAAMyE,aAAe,kBAC5DjG,SAAS8F,cAAc,gBAAgBtE,MAAM0E,OAAS,oBACtDlG,SAAS8F,cAAc,gBAAgBtE,MAAM2E,gBAAkB,YAI/DnG,SAAS8F,cAAc,gBAAgBtE,MAAMuE,OAAS,MACtD/F,SAAS8F,cAAc,gBAAgBtE,MAAMwE,WAAa,MAC1DhG,SAAS8F,cAAc,gBAAgBtE,MAAM0E,OAAS,yCASxD,OACEhI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgI,EAAD,CAAe5H,qBAAsBF,KAAKE,qBAAsBO,qBAAsBT,KAAKS,uBAC3Fb,EAAAC,EAAAC,cAACiI,EAAD,CAAc/G,YAAahB,KAAKC,MAAMf,MAAMH,eAAgBC,OAAQgB,KAAKC,MAAMf,MAAMF,SACrFY,EAAAC,EAAAC,cAACkI,EAAD,CAAYjE,sBAAuB/D,KAAK+D,wBACxCnE,EAAAC,EAAAC,cAACmI,EAAD,cAzJUvH,IAAMC,WAmKTuH,cAJS,SAAChJ,GACrB,MAAO,CAACA,MAAQA,IAGLgJ,CAAyB3D,GC3KlC4D,EAAQC,YAAYnJ,GAE1BoJ,IAASC,OACT1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAUJ,MAAOA,GACfvI,EAAAC,EAAAC,cAAC0I,EAAD,OAEA9G,SAASuB,eAAe","file":"static/js/main.87245ce8.chunk.js","sourcesContent":["import { config } from '../config';\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nimport '../index.css';\n\n\n/* ------------------------------------------------------------------------------------------- */\n//             global variable to operate with a map\n/* ------------------------------------------------------------------------------------------- */\n\nlet map;\nlet arrayOfMarkers = [];\n\nclass Map extends React.Component {\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Changing coordinates when new props arrive\n  /* ------------------------------------------------------------------------------------------- */\n\n  componentWillReceiveProps(nextProps){\n\n    // Setting a new map center after user submit a new location\n    if (nextProps.coordinates !== this.props.coordinates) {\n\n      // Setting map center if it changed\n      map.setCenter(nextProps.coordinates)\n\n      // Clear array of pins\n      for(let element of arrayOfMarkers) {\n        element.remove();\n      }\n\n      // Need delay to make sure we have something to render\n      setTimeout(() => {\n        \n        // Creating and add pins to map\n        this.createPins(this.props.tweets);\n      }, 3000);\n    }\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Creating pins from a tweets array\n  /* ------------------------------------------------------------------------------------------- */\n\n  createPins(arrayOfTweets) {\n\n    arrayOfMarkers = arrayOfTweets\n      // .filter(element => element.pic) // Take this line off to show without pictures as well\n      .map((element, index) => {\n\n        // create a DOM element for the marker\n        var markerElement = document.createElement('div');\n        markerElement.className = 'marker';\n        // markerElement.style.backgroundImage = `url(${element.pic})`\n        // markerElement.style.backgroundColor = this.generateRandomColor();\n\n        // Creating a popup\n        const popup = new mapboxgl.Popup({ \n          offset: 20, \n          closeButton: false, \n          className: 'popup'\n        })\n        \n        // HTML Content for a popup\n        const picture = element.pic ? element.pic : ``;\n        const popupHTMLContent = `<img class=\"popup-pic\" src=\"${picture}\"></img><p class=\"popup-text\">${element.text}</p><h5 class=\"popup-author\">@${element.user}</h6>`;\n        popup.setHTML(popupHTMLContent);\n\n        // on mouseover - show popup\n        markerElement.addEventListener('mouseover', () => popup.setLngLat(element.point).setHTML(popupHTMLContent).addTo(map));\n\n        // on mouseout - remove popup\n        markerElement.addEventListener('mouseout', () => popup.remove());\n      \n        // add marker to map\n        return new mapboxgl.Marker(markerElement)\n            .setLngLat(element.point)\n            .setPopup(popup)\n            .addTo(map);\n      })\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Generate random color\n  /* ------------------------------------------------------------------------------------------- */\n\n  generateRandomColor() {\n\n    return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Rendering map to a screen\n  /* ------------------------------------------------------------------------------------------- */\n\n  renderMapToScreen(){\n\n  // mapbox://styles/mapbox/dark-v9\n \n\n    mapboxgl.accessToken = config.REACT_APP_MAPS_KEY;\n    map = new mapboxgl.Map({\n        container: document.getElementById('mapbox-container'),\n        style: 'mapbox://styles/mapbox/dark-v9',\n        center: ['-118.2439', '34.0544'],\n        zoom: 12,\n        hash: false,\n        minZoom: 11,\n        maxZoom: 15,\n        interactive: true\n    })\n  \n    // Listener to change state depending on a map center\n    // Map starting to lag on with a listener - so turning it off\n    // map.on('mouseup', this.props.handleCenterChange);\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Render map to screen after componen is mounted \n  /* ------------------------------------------------------------------------------------------- */\n\n  componentDidMount(){\n\n    // We have a long/lat \n    // as a this.props.coordinates\n    // Creating and rendering a mapbox\n    this.renderMapToScreen();\n  }\n\n  render() {\n    return (\n      <div></div>\n    );\n  }\n}\n\nexport default Map;","\nconst initialState = {\n    location: 'Los Angeles, California, United States',\n    locationLngLat: [-118.2439, 34.0544],\n    tweets: []\n}\n\nconst rootReducer = (state = initialState, action) => {\n    \n    switch (action.type) {\n        case 'LOCATION_SET_CITY_COORDINATES':\n            return({\n                location: action.location,\n                locationLngLat: action.locationLngLat,\n                tweets: state.tweets\n            })\n    \n        case 'LOCATION_SET_CITY':\n            return({\n                location: action.city,\n                locationLngLat: state.locationLngLat,\n                tweets: state.tweets\n            })\n\n        case 'SET_TWEETS':\n            return({\n            location: state.location,\n            locationLngLat: state.locationLngLat,\n            tweets: action.tweetsArray\n        })\n\n        default:\n            return state;\n    }\n}\n\nexport default rootReducer;","export const config = \n{\n    REACT_APP_MAPS_KEY : 'pk.eyJ1Ijoia3V0dXphdmNoYW5pbiIsImEiOiJjam5kYnphbW8wczQ1M3ZucmxxMGpoZzFkIn0.Mc_1RL2WSX97wJ7hU3DENA',\n}\n\n","import React from 'react';\nimport '../index.css';\n\nclass LocationInput extends React.Component {\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleLocationSubmit} className=\"location-input\">\n                <label>\n                    <input type=\"text\" name=\"location\" placeholder=\"Enter a city\" value={this.props.locationToShow} onChange={this.props.handleLocationChange}></input>\n                </label>\n                <button type=\"submit\">Find tweets</button>\n            </form>\n        )\n    }\n}\n\nexport default LocationInput;","import React from 'react';\nimport '../index.css';\nimport Map from './Map';\n\nclass MapContainer extends React.Component {\n    render() {\n        return (\n            <div id='mapbox-container'>\n                <Map coordinates={this.props.coordinates} tweets={this.props.tweets}/>\n            </div>\n        )\n    }\n}\n\nexport default MapContainer;\n","import React from 'react';\nimport '../index.css';\n\nclass InfoButton extends React.Component {\n    render(){\n        return(\n            <div className=\"info-icon\" onClick={this.props.handleInfoButtonClick}>\n            <h1>?</h1>\n            </div>\n        );\n    }\n}\n\nexport default InfoButton;","import React from 'react';\nimport '../index.css';\n\nconst InfoTab = () => {\n        return(\n            <div className=\"info-tab\">\n            <h2>City Tweets</h2>\n            <p>Simply put a city and explore most recent and popular local tweets!</p>\n            <p className='made-by'><a href=\"http://www.polevoy.in\">www.polevoy.in</a></p>\n            </div>\n        );\n}\n\nexport default InfoTab;","const LOCATION_SET_CITY_COORDINATES = 'LOCATION_SET_CITY_COORDINATES';\nconst LOCATION_SET_CITY = 'LOCATION_SET_CITY';\nconst SET_TWEETS = 'SET_TWEETS';\n\nexport function setLocationAndCoordinates(location, locationLngLat) {\n    return { type: LOCATION_SET_CITY_COORDINATES, location, locationLngLat }\n} \n\nexport function setLocationCity(city) {\n    return { type: LOCATION_SET_CITY, city}\n}\n\nexport function setTweets(tweetsArray) {\n    return { type: SET_TWEETS, tweetsArray }\n}\n\n","\nimport {config} from '../config'\nimport React from 'react';\nimport LocationInput from './LocationInput';\nimport '../index.css';\nimport MapContainer from './MapContainer';\nimport InfoButton from './InfoButton';\nimport InfoTab from './InfoTab';\nimport {connect} from 'react-redux';\nimport {setLocationAndCoordinates, setLocationCity, setTweets} from '../actions/actions'\nrequire('dotenv').config();\n\n/* ------------------------------------------------------------------------------------------- */\n//          Main component of an app\n/* ------------------------------------------------------------------------------------------- */\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleLocationSubmit = this.handleLocationSubmit.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.searchForTweets = this.searchForTweets.bind(this);\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          After mounting done\n  /* ------------------------------------------------------------------------------------------- */\n\n  componentDidMount() {\n    this.props.dispatch(setLocationAndCoordinates('Los Angeles, California, United States', [-118.2439, 34.0544]));\n    // This has to be done with a pause, so we not getting a empty array\n    this.searchForTweets()\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          getting a user location from a URL\n  /* ------------------------------------------------------------------------------------------- */\n\n  getCoordinatesFromURL = () => {\n    return window.location.hash.split('/').splice(1, 2).map( element => parseFloat(element));\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //        request a location by name and get back a lang and lat of that location on a map\n  /* ------------------------------------------------------------------------------------------- */\n\n  requestLocationGeocode() {\n\n    // Building request and based on response create a map\n    const linkToRequest = `https://api.mapbox.com/geocoding/v5/mapbox.places/${this.props.state.location}.json?access_token=${config.REACT_APP_MAPS_KEY}`;\n    \n    // Sending a request\n    fetch(linkToRequest)\n      .then(results => results.json())\n      .then((results) => {\n\n        // Take first and most relevant result\n        // results.features - array of locations\n        this.props.dispatch(setLocationAndCoordinates(results.features[0].place_name, results.features[0].center))\n      });\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          on submit - change location in a state after user clicked 'Submit'\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleLocationSubmit(event) {\n\n    event.preventDefault();\n    this.requestLocationGeocode(this.props.state.location)\n\n    // This has to be done with a pause, so we not getting a empty array\n    setTimeout(() => this.searchForTweets(), 1000);\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           on change - will alternate status as well\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleLocationChange(event) {\n    this.props.dispatch(setLocationCity(event.target.value))\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           Helper function: generate random coordinates within radius\n  /* ------------------------------------------------------------------------------------------- */\n\n  generateCoordinateWithin(center, radius) {\n\n    let y0 = center[0]\n    let x0 = center[1]\n    let rd = (radius * 1.60934 * 1000) / 111300;\n    let u = Math.random();\n    let v = Math.random();\n    let w = rd * Math.sqrt(u);\n    let t = 2 * Math.PI * v;\n    let x = w * Math.cos(t);\n    let y = w * Math.sin(t);\n    \n    return [y + y0, x + x0]\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           on submit - search for a tweets\n  /* ------------------------------------------------------------------------------------------- */\n\n  searchForTweets() {\n\n    // const linkToFetch = `http://localhost:4000/tweets?lat=${this.state.locationLngLat[1]}&lng=${this.state.locationLngLat[0]}`;\n    const linkToFetch = `https://cityglow.herokuapp.com/tweets?lat=${this.props.state.locationLngLat[1]}&lng=${this.props.state.locationLngLat[0]}`;\n    \n    fetch(linkToFetch)\n    .then(response => response.json())\n    .then(response => {\n\n      // For each tweet object generating random geo coordinates\n      // within certain radius\n\n      const tweets = response\n      .concat(response)\n      .map(element => {\n        return {\n           point: this.generateCoordinateWithin(this.props.state.locationLngLat, 7),\n           text: element.text,\n           pic: element.picture ? element.picture[0].media_url : undefined,\n           user: element.user\n        }\n      })\n   \n      // Adding all points to a state\n      this.props.dispatch(setTweets(tweets));\n    })\n    .catch(error => console.error(error));\n  }\n  \n  /* ------------------------------------------------------------------------------------------- */\n  //        Animation for a menu\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleInfoButtonClick() {\n\n    if (document.querySelector('div.info-tab').style.height !== '40vh') {\n\n      document.querySelector('div.info-tab').style.height = '40vh';\n      document.querySelector('div.info-tab').style.paddingTop = '18vh';\n      document.querySelector('div.info-tab').style.borderRadius = '0em 0em 2em 2em';\n      document.querySelector('div.info-tab').style.border = '3px solid #DC965A';\n      document.querySelector('div.info-tab').style.backgroundColor = '#2F2F2F';\n\n    } else {\n\n      document.querySelector('div.info-tab').style.height = '0vh';\n      document.querySelector('div.info-tab').style.paddingTop = '0vh';\n      document.querySelector('div.info-tab').style.border = 'none';\n    }\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //        Entry point\n  /* ------------------------------------------------------------------------------------------- */\n  \n  render() {\n    return (\n      <div>\n        <LocationInput handleLocationSubmit={this.handleLocationSubmit} handleLocationChange={this.handleLocationChange} />\n        <MapContainer coordinates={this.props.state.locationLngLat} tweets={this.props.state.tweets}/>\n        <InfoButton handleInfoButtonClick={this.handleInfoButtonClick}/>\n        <InfoTab />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return {state : state}\n}\n\nexport default connect(mapStateToProps)(App);\n\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport App from './components/App'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n<Provider store={store}>\n  <App />\n</Provider>\n, document.getElementById('root'));"],"sourceRoot":""}