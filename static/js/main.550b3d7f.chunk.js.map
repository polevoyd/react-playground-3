{"version":3,"sources":["components/Map.js","config.js","components/LocationInput.js","components/MapContainer.js","components/InfoButton.js","components/InfoTab.js","index.js"],"names":["map","config","LocationInput","react_default","a","createElement","onSubmit","this","props","handleLocationSubmit","className","type","name","placeholder","value","locationToShow","onChange","handleLocationChange","React","Component","arrayOfMarkers","Map","nextProps","_this","coordinates","setCenter","setTimeout","_i","length","remove","createPins","tweets","arrayOfTweets","element","index","markerElement","document","popup","mapboxgl","Popup","offset","closeButton","picture","pic","popupHTMLContent","concat","text","user","setHTML","addEventListener","setLngLat","point","addTo","Marker","setPopup","Math","random","accessToken","container","getElementById","style","center","zoom","hash","minZoom","maxZoom","interactive","renderMapToScreen","MapContainer","id","components_Map","handleCenterChange","InfoButton","onClick","handleInfoButtonClick","InfoTab","href","require","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getCoordinatesFromURL","window","location","split","splice","parseFloat","state","locationLngLat","bind","assertThisInitialized","searchForTweets","_this2","requestLocationGeocode","event","setState","lngLat","lng","lat","_this3","linkToRequest","fetch","then","results","json","features","place_name","_this4","preventDefault","target","radius","y0","x0","rd","u","v","w","sqrt","t","PI","x","cos","sin","_this5","linkToFetch","response","generateCoordinateWithin","media_url","undefined","catch","error","console","querySelector","height","paddingTop","borderRadius","border","backgroundColor","components_LocationInput","components_MapContainer","components_InfoButton","components_InfoTab","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.550b3d7f.chunk.js","sourcesContent":["import { config } from '../config';\nimport React from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nimport '../index.css';\n\n\n/* ------------------------------------------------------------------------------------------- */\n//             global variable to operate with a map\n/* ------------------------------------------------------------------------------------------- */\n\nlet map;\nlet arrayOfMarkers = [];\n\nclass Map extends React.Component {\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Changing coordinates when new props arrive\n  /* ------------------------------------------------------------------------------------------- */\n\n  componentWillReceiveProps(nextProps){\n\n    // Setting a new map center after user submit a new location\n    if (nextProps.coordinates !== this.props.coordinates) {\n\n      // Setting map center if it changed\n      map.setCenter(nextProps.coordinates)\n\n      // Need delay to make sure we have something to render\n      setTimeout(() => {\n        \n      // Clear array of pins\n      for(let element of arrayOfMarkers) {\n        element.remove();\n      }\n\n        // Creating and add pins to map\n        this.createPins(this.props.tweets);\n      }, 3000);\n    }\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Creating pins from a tweets array\n  /* ------------------------------------------------------------------------------------------- */\n\n\n  createPins(arrayOfTweets) {\n\n    arrayOfMarkers = arrayOfTweets\n      // .filter(element => element.pic) // Take this line off to show without pictures as well\n      .map((element, index) => {\n\n        // create a DOM element for the marker\n        var markerElement = document.createElement('div');\n        markerElement.className = 'marker';\n        // markerElement.style.backgroundImage = `url(${element.pic})`\n        // markerElement.style.backgroundColor = this.generateRandomColor();\n\n        // Creating a popup\n        const popup = new mapboxgl.Popup({ \n          offset: 20, \n          closeButton: false, \n          className: 'popup'\n        })\n        \n        // HTML Content for a popup\n        const picture = element.pic ? element.pic : ``;\n        const popupHTMLContent = `<img class=\"popup-pic\" src=\"${picture}\"></img><p class=\"popup-text\">${element.text}</p><h5 class=\"popup-author\">@${element.user}</h6>`;\n        popup.setHTML(popupHTMLContent);\n\n        // on mouseover - show popup\n        markerElement.addEventListener('mouseover', () => popup.setLngLat(element.point).setHTML(popupHTMLContent).addTo(map));\n\n        // on mouseout - remove popup\n        markerElement.addEventListener('mouseout', () => popup.remove());\n      \n        // add marker to map\n        return new mapboxgl.Marker(markerElement)\n            .setLngLat(element.point)\n            .setPopup(popup)\n            .addTo(map);\n      })\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Generate random color\n  /* ------------------------------------------------------------------------------------------- */\n\n  generateRandomColor() {\n\n    return `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Rendering map to a screen\n  /* ------------------------------------------------------------------------------------------- */\n\n  renderMapToScreen(){\n\n  // mapbox://styles/mapbox/dark-v9\n \n\n    mapboxgl.accessToken = config.REACT_APP_MAPS_KEY;\n    map = new mapboxgl.Map({\n        container: document.getElementById('mapbox-container'),\n        style: 'mapbox://styles/mapbox/dark-v9',\n        center: ['-118.2439', '34.0544'],\n        zoom: 12,\n        hash: false,\n        minZoom: 11,\n        maxZoom: 15,\n        interactive: true\n    })\n\n    // Listener to change state depending on a map center\n    // Map starting to lag on with a listener - so turning it off\n    // map.on('mouseup', this.props.handleCenterChange);\n\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Render map to screen after componen is mounted \n  /* ------------------------------------------------------------------------------------------- */\n\n  componentDidMount(){\n\n    // We have a long/lat \n    // as a this.props.coordinates\n    // Creating and rendering a mapbox\n    this.renderMapToScreen();\n  }\n\n  render() {\n\n    return (\n      <div></div>\n    );\n  }\n}\n\nexport default Map;","export const config = \n{\n    REACT_APP_MAPS_KEY : 'pk.eyJ1Ijoia3V0dXphdmNoYW5pbiIsImEiOiJjam5kYnphbW8wczQ1M3ZucmxxMGpoZzFkIn0.Mc_1RL2WSX97wJ7hU3DENA',\n}\n\n","import React from 'react';\nimport '../index.css';\n\nclass LocationInput extends React.Component {\n\n    render() {\n        return(\n            <form onSubmit={this.props.handleLocationSubmit} className=\"location-input\">\n                <label>\n                    <input type=\"text\" name=\"location\" placeholder=\"Enter a city\" value={this.props.locationToShow} onChange={this.props.handleLocationChange}></input>\n                </label>\n                <button type=\"submit\">Find tweets</button>\n            </form>\n        )\n    }\n}\n\nexport default LocationInput;","import React from 'react';\nimport '../index.css';\nimport Map from './Map';\n\nclass MapContainer extends React.Component {\n\n    render() {\n        return (\n            <div id='mapbox-container'>\n                <Map coordinates={this.props.coordinates} handleCenterChange={this.props.handleCenterChange} tweets={this.props.tweets}/>\n            </div>\n        )\n    }\n}\n\nexport default MapContainer;\n","import React from 'react';\nimport '../index.css';\n\nclass InfoButton extends React.Component {\n\n    render(){\n        return(\n            <div className=\"info-icon\" onClick={this.props.handleInfoButtonClick}>\n            <h1>?</h1>\n            </div>\n        );\n    }\n}\n\nexport default InfoButton;","import React from 'react';\nimport '../index.css';\n\nclass InfoTab extends React.Component {\n\n    render() {\n        \n        return(\n            <div className=\"info-tab\">\n            <h2>City Tweets</h2>\n            <p>Simply put a city and explore local tweets!</p>\n            <p>App shows you most recent and popular tweets combined.</p>\n            <p className='made-by'><a href=\"http://www.polevoy.in\">www.polevoy.in</a></p>\n            </div>\n        );\n    }\n}\n\nexport default InfoTab;","\nimport {config} from './config'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport LocationInput from './components/LocationInput';\nimport './index.css';\nimport MapContainer from './components/MapContainer';\nimport InfoButton from './components/InfoButton';\nimport InfoTab from './components/InfoTab';\nrequire('dotenv').config();\n\n/* ------------------------------------------------------------------------------------------- */\n//          Main component of an app\n/* ------------------------------------------------------------------------------------------- */\n\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n\n      // set initial location to current location and load it on mount\n      // 'Seattle' - only for a testing simplicity\n      location: 'Los Angeles',\n      locationLngLat: this.getCoordinatesFromURL(), // [-122.3447, 47.6151]\n      tweets: []\n    }\n\n    this.handleLocationSubmit = this.handleLocationSubmit.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleCenterChange = this.handleCenterChange.bind(this);\n    this.searchForTweets = this.searchForTweets.bind(this);\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          After mounting done\n  /* ------------------------------------------------------------------------------------------- */\n\n  componentDidMount() {\n\n    this.getCoordinatesFromURL();\n    // Requesting tweets for a default starting location\n    this.requestLocationGeocode(this.state.location)\n\n    // starting to search for venue\n    // This has to be done with a pause, so we not getting a empty array\n    setTimeout(() => this.searchForTweets(), 1000);\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          Change state based on a map center change\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleCenterChange(event) {\n\n      this.setState({\n\n        locationLngLat: [event.lngLat.lng , event.lngLat.lat]\n      })\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          getting a user location from a URL\n  /* ------------------------------------------------------------------------------------------- */\n\n  getCoordinatesFromURL = () => {\n\n    return window.location.hash.split('/').splice(1, 2).map( element => parseFloat(element));\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //        request a location by name and get back a lang and lat of that location on a map\n  /* ------------------------------------------------------------------------------------------- */\n\n  requestLocationGeocode() {\n\n    // Building request and based on response create a map\n    const linkToRequest = `https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.location}.json?access_token=${config.REACT_APP_MAPS_KEY}`;\n    \n    // Sending a request\n    fetch(linkToRequest)\n      .then(results => results.json())\n      .then((results) => {\n\n        // For just take first and most relevant result\n        // results.features - array of locations\n        this.setState({\n          location: results.features[0].place_name,\n          locationLngLat: results.features[0].center\n        })\n      });\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //          on submit - change location in a state after user clicked 'Submit'\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleLocationSubmit(event) {\n\n    event.preventDefault();\n    this.requestLocationGeocode(this.state.location)\n\n    // starting to search for venue\n    // This has to be done with a pause, so we not getting a empty array\n    setTimeout(() => this.searchForTweets(), 1000);\n    \n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           on change - will alternate status as well\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleLocationChange(event) {\n\n    // console.log(userLocation)\n    \n    this.setState({\n\n      location: event.target.value,\n    })\n  }\n\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           Helper function: generate random coordinates within radius\n  /* ------------------------------------------------------------------------------------------- */\n\n  generateCoordinateWithin(center, radius) {\n\n    let y0 = center[0]\n    let x0 = center[1]\n    let rd = (radius * 1.60934 * 1000) / 111300;\n    let u = Math.random();\n    let v = Math.random();\n    let w = rd * Math.sqrt(u);\n    let t = 2 * Math.PI * v;\n    let x = w * Math.cos(t);\n    let y = w * Math.sin(t);\n    \n    return [y + y0, x + x0]\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //           on submit - search for a tweets\n  /* ------------------------------------------------------------------------------------------- */\n\n  searchForTweets() {\n\n    // const linkToFetch = `http://localhost:4000/tweets?lat=${this.state.locationLngLat[1]}&lng=${this.state.locationLngLat[0]}`;\n    const linkToFetch = `https://cityglow.herokuapp.com/tweets?lat=${this.state.locationLngLat[1]}&lng=${this.state.locationLngLat[0]}`;\n    \n    fetch(linkToFetch)\n    .then(response => response.json())\n    .then(response => {\n\n      // For each tweet object generating random geo coordinates\n      // within certain radius\n\n      const tweets = response\n      .concat(response)\n      .map(element => {\n\n        return {\n           point: this.generateCoordinateWithin(this.state.locationLngLat, 7),\n           text: element.text,\n           pic: element.picture ? element.picture[0].media_url : undefined,\n           user: element.user\n        }\n      })\n      \n      // Adding all points to a state\n      this.setState({\n        tweets: tweets\n      })\n    })\n    .catch(error => console.error(error));\n  }\n  \n  /* ------------------------------------------------------------------------------------------- */\n  //        Animation for a menu\n  /* ------------------------------------------------------------------------------------------- */\n\n  handleInfoButtonClick() {\n\n    if (document.querySelector('div.info-tab').style.height !== '40vh') {\n\n      document.querySelector('div.info-tab').style.height = '40vh';\n      document.querySelector('div.info-tab').style.paddingTop = '18vh';\n      document.querySelector('div.info-tab').style.borderRadius = '0em 0em 2em 2em';\n      document.querySelector('div.info-tab').style.border = '3px solid #DC965A';\n      document.querySelector('div.info-tab').style.backgroundColor = '#2F2F2F';\n\n    } else {\n\n      document.querySelector('div.info-tab').style.height = '0vh';\n      document.querySelector('div.info-tab').style.paddingTop = '0vh';\n      document.querySelector('div.info-tab').style.border = 'none';\n    }\n  }\n\n  /* ------------------------------------------------------------------------------------------- */\n  //        Entry point\n  /* ------------------------------------------------------------------------------------------- */\n  \n  render() {\n\n    return (\n      <div>\n        <LocationInput handleLocationSubmit={this.handleLocationSubmit} handleLocationChange={this.handleLocationChange} />\n        <MapContainer coordinates={this.state.locationLngLat} handleCenterChange={this.handleCenterChange} tweets={this.state.tweets}/>\n        <InfoButton handleInfoButtonClick={this.handleInfoButtonClick}/>\n        <InfoTab />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}